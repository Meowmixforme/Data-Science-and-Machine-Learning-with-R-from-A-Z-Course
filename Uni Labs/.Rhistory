str(aero$Registration)
#install.packages("readr")
library(readr)
library(lubridate)
aero <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Registration)
str(aero$cn.In)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "", NA, aero$Route)
aero$Type <- ifelse(aero$Type == "", NA, aero$Type)
aero$Registration <- ifelse(aero$Registration == "", NA, aero$Registration)
aero$cn.In <- ifelse(aero$cn.In == "", NA, aero$cn.In)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
na_count1 <- sum(is.na(aero$Date))
na_count2 <- sum(is.na(aero$Time))
na_count3 <- sum(is.na(aero$Operator))
na_count4 <- sum(is.na(aero$Flight..))
na_count5 <- sum(is.na(aero$Route))
na_count6 <- sum(is.na(aero$Type))
na_count7 <- sum(is.na(aero$Registration))
na_count8 <- sum(is.na(aero$cn.In))
na_count1
na_count2
na_count3
na_count4
na_count5
na_count6
na_count7
na_count8
#install.packages("readr")
library(readr)
library(lubridate)
aero <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Registration)
str(aero$cn.In)
str(aero$Aboard)
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "", NA, aero$Route)
aero$Type <- ifelse(aero$Type == "", NA, aero$Type)
aero$Registration <- ifelse(aero$Registration == "", NA, aero$Registration)
aero$cn.In <- ifelse(aero$cn.In == "", NA, aero$cn.In)
aero$Aboard <- ifelse(aero$Aboard == "", NA, aero$Aboard)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
View(aero)
na_count1 <- sum(is.na(aero$Date))
na_count2 <- sum(is.na(aero$Time))
na_count3 <- sum(is.na(aero$Operator))
na_count4 <- sum(is.na(aero$Flight..))
na_count5 <- sum(is.na(aero$Route))
na_count6 <- sum(is.na(aero$Type))
na_count7 <- sum(is.na(aero$Registration))
na_count8 <- sum(is.na(aero$cn.In))
na_count9 <- sum(is.na(aero$Aboard))
na_count1
na_count2
na_count3
na_count4
na_count5
na_count6
na_count7
na_count8
na_count9
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
na_count1 <- sum(is.na(aero$Date))
na_count2 <- sum(is.na(aero$Time))
na_count3 <- sum(is.na(aero$Operator))
na_count4 <- sum(is.na(aero$Flight..))
na_count5 <- sum(is.na(aero$Route))
na_count6 <- sum(is.na(aero$Type))
na_count7 <- sum(is.na(aero$Registration))
na_count8 <- sum(is.na(aero$cn.In))
na_count9 <- sum(is.na(aero$Aboard))
na_count10 <- sum(is.na(aero$Fatalities))
na_count1
na_count2
na_count3
na_count4
na_count5
na_count6
na_count7
na_count8
na_count9
na_count10
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Registration)
str(aero$cn.In)
str(aero$Aboard)
str(aero$Fatalities)
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Registration)
str(aero$cn.In)
str(aero$Aboard)
str(aero$Fatalities)
str(aero$Ground)
str(aero$Summary)
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "", NA, aero$Route)
aero$Type <- ifelse(aero$Type == "", NA, aero$Type)
aero$Registration <- ifelse(aero$Registration == "", NA, aero$Registration)
aero$cn.In <- ifelse(aero$cn.In == "", NA, aero$cn.In)
aero$Summary <- ifelse(aero$Summary == "", NA, aero$Summary)
#install.packages("readr")
library(readr)
library(lubridate)
aero <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Registration)
str(aero$cn.In)
str(aero$Aboard)
str(aero$Fatalities)
str(aero$Ground)
str(aero$Summary)
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "", NA, aero$Route)
aero$Type <- ifelse(aero$Type == "", NA, aero$Type)
aero$Registration <- ifelse(aero$Registration == "", NA, aero$Registration)
aero$cn.In <- ifelse(aero$cn.In == "", NA, aero$cn.In)
aero$Summary <- ifelse(aero$Summary == "", NA, aero$Summary)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
na_count1 <- sum(is.na(aero$Date))
na_count2 <- sum(is.na(aero$Time))
na_count3 <- sum(is.na(aero$Operator))
na_count4 <- sum(is.na(aero$Flight..))
na_count5 <- sum(is.na(aero$Route))
na_count6 <- sum(is.na(aero$Type))
na_count7 <- sum(is.na(aero$Registration))
na_count8 <- sum(is.na(aero$cn.In))
na_count9 <- sum(is.na(aero$Aboard))
na_count10 <- sum(is.na(aero$Fatalities))
na_count11 <- sum(is.na(aero$Ground))
na_count12 <- sum(is.na(aero$Summary))
na_count1
na_count2
na_count3
na_count4
na_count5
na_count6
na_count7
na_count8
na_count9
na_count10
na_count11
na_count12
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
#round(misscol, 2)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
#round(misscol, 2)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
misscol
#round(misscol, 2)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 3)
na_count1 <- sum(is.na(aero$Date))
na_count2 <- sum(is.na(aero$Time))
na_count3 <- sum(is.na(aero$Operator))
na_count4 <- sum(is.na(aero$Flight..))
na_count5 <- sum(is.na(aero$Route))
na_count6 <- sum(is.na(aero$Type))
na_count7 <- sum(is.na(aero$Registration))
na_count8 <- sum(is.na(aero$cn.In))
na_count9 <- sum(is.na(aero$Aboard))
na_count10 <- sum(is.na(aero$Fatalities))
na_count11 <- sum(is.na(aero$Ground))
na_count12 <- sum(is.na(aero$Summary))
na_count1
na_count2
na_count3
na_count4
na_count5
na_count6
na_count7
na_count8
na_count9
na_count10
na_count11
na_count12
unique(aero$Route)
unique(aero$Route).sum()
p <- unique(aero$Route)
sum(p)
p <- unique(aero$Registration)
unique(aero$Registration)
library(tidytext)
install.packages("tidytext")
library(mlbench)
data("BreastCancer")
# Clean off rows with missing data
BreastCancer = BreastCancer[which(complete.cases(BreastCancer)==TRUE),]
head(BreastCancer)
names(BreastCancer)
y = as.matrix(BreastCancer[,11])
y[which(y=="benign")] = 0
y[which(y=="malignant")] = 1
y = as.numeric(y)
x = as.numeric(as.matrix(BreastCancer[,2:10]))
x = matrix(as.numeric(x),ncol=9)
library(deepnet)
install.packages("deepnet")
library(deepnet)
nn <- nn.train(x, y, hidden = c(5))
yy = nn.predict(nn, x)
print(head(yy))
yhat = matrix(0,length(yy),1)
yhat[which(yy > mean(yy))] = 1
yhat[which(yy <= mean(yy))] = 0
cm = table(y,yhat)
print(cm)
print(sum(diag(cm))/sum(cm))
library(neuralnet)
install.packages("neuralnet")
library(neuralnet)
df = data.frame(cbind(x,y))
nn = neuralnet(y~V1+V2+V3+V4+V5+V6+V7+V8+V9,data=df,hidden = 5)
yy = nn$net.result[[1]]
yhat = matrix(0,length(y),1)
yhat[which(yy > mean(yy))] = 1
yhat[which(yy <= mean(yy))] = 0
print(table(y,yhat))
library(h2o)
install.packages("h2o")
library(h2o)
library(h2o)
install.packages("magrittr")
library(magrittr)
library(keras)
model <- keras_model_sequential()
library(h2o)
library(h2o)
library(h2o)
library(h2o)
library(h2o)
library(h2o)
library(h2o)
library(h2o)
library(h2o)
library(magrittr)
library(keras)
model <- keras_model_sequential()
library(magrittr)
library(keras)
model <- keras_model_sequential()
# Install the tensorflow R package from GitHub
devtools::install_github("rstudio/tensorflow")
install.packages("devtools")
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
reticulate::install_python()
install.packages("reticulate")
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
reticulate::install_python()
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
reticulate::install_python()
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
reticulate::install_python()
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
reticulate::install_python()
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
reticulate::install_python()
install.packages("tensorflow")
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
#reticulate::install_python()
library(tensorflow)
install_tensorflow(envname = "r-tensorflow")
library(magrittr)
library(keras)
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
#reticulate::install_python()
library(tensorflow)
install_tensorflow(envname = "r-tensorflow")
library(magrittr)
library(keras)
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
#reticulate::install_python()
library(tensorflow)
#install_tensorflow(envname = "r-tensorflow")
library(magrittr)
library(keras)
model <- keras_model_sequential()
n_units = 100
tf_train <- read.csv("..PATH/BreastCancer.csv")
library(mlbench)
data("BreastCancer")
# Clean off rows with missing data
BreastCancer = BreastCancer[which(complete.cases(BreastCancer)==TRUE),]
head(BreastCancer)
y = as.matrix(BreastCancer[,11])
y[which(y=="benign")] = 0
y[which(y=="malignant")] = 1
y = as.numeric(y)
x = as.numeric(as.matrix(BreastCancer[,2:10]))
x = matrix(as.numeric(x),ncol=9)
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
#reticulate::install_python()
library(tensorflow)
#install_tensorflow(envname = "r-tensorflow")
library(magrittr)
library(keras)
model <- keras_model_sequential()
n_units = 100
tf_train <- read.csv("..PATH/BreastCancer.csv")
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
#reticulate::install_python()
library(tensorflow)
#install_tensorflow(envname = "r-tensorflow")
library(magrittr)
library(keras)
model <- keras_model_sequential()
n_units = 100
tf_train <- read.csv("/BreastCancer.csv")
setwd("~/GitHub/Data-Science-and-Machine-Learning-with-R-from-A-Z-Course/Uni Labs")
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
#reticulate::install_python()
library(tensorflow)
#install_tensorflow(envname = "r-tensorflow")
library(magrittr)
library(keras)
model <- keras_model_sequential()
n_units = 100
tf_train <- read.csv("/BreastCancer.csv")
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
#reticulate::install_python()
library(tensorflow)
#install_tensorflow(envname = "r-tensorflow")
library(magrittr)
library(keras)
model <- keras_model_sequential()
n_units = 100
tf_train <- read.csv("C:\Users\v8255\OneDrive\Documents\GitHub\Data-Science-and-Machine-Learning-with-R-from-A-Z-Course\Uni Labs\BreastCancer.csv")
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
#reticulate::install_python()
library(tensorflow)
#install_tensorflow(envname = "r-tensorflow")
library(magrittr)
library(keras)
model <- keras_model_sequential()
n_units = 100
tf_train <- read.csv("/BreastCancer.csv")
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
#reticulate::install_python()
library(tensorflow)
#install_tensorflow(envname = "r-tensorflow")
library(magrittr)
library(keras)
model <- keras_model_sequential()
n_units = 100
tf_train <- read.csv("BreastCancer.csv")
tf_test <- read.csv("/BreastCancer.csv")
# Install the tensorflow R package from GitHub (need to install devtools first)
devtools::install_github("rstudio/tensorflow")
# Install Python via reticulate
#reticulate::install_python()
library(tensorflow)
#install_tensorflow(envname = "r-tensorflow")
library(magrittr)
library(keras)
model <- keras_model_sequential()
n_units = 100
tf_train <- read.csv("BreastCancer.csv")
tf_test <- read.csv("BreastCancer.csv")
X_train = as.matrix(tf_train[,2:10])
X_test = as.matrix(tf_test[,2:10])
y_train = as.matrix(tf_train[,11])
y_test = as.matrix(tf_test[,11])
idx = which(y_train=="benign"); y_train[idx]=0; y_train[-idx]=1;
y_train=as.integer(y_train)
idx = which(y_test=="benign"); y_test[idx]=0; y_test[-idx]=1;
# Next, we define the deep learning model.
n_units = 100
model %>%
layer_dense(units = n_units,
activation = 'relu',
input_shape = dim(X_train)[2]) %>%
layer_dropout(rate = 0.25) %>%
layer_dense(units = n_units, activation = 'relu') %>%
layer_dropout(rate = 0.25) %>%
layer_dense(units = n_units, activation = 'relu') %>%
layer_dropout(rate = 0.25) %>%
layer_dense(units = 10, activation = 'softmax')
