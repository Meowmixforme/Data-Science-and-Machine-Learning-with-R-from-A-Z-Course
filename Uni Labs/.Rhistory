data = train,
method = "class")
plot(fit)
text(fit)
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class")
plot(fit) # Ugly!
text(fit)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
confMat <- table(test$Survived, Prediction)
accuracy <- sum(diag(confMat)) / sum(confMat)
accuracy * 100
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class",
control = rpart.control(minsplit = 2, cp = 0))
fancyRpartPlot(fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class",
control = rpart.control(minsplit = 2, cp = 0))
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
confMat <- table(test$Survived, Prediction)
accuracy <- sum(diag(confMat)) / sum(confMat)
accuracy * 100
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class",
control = rpart.control(minsplit = 7, cp = 2))
new.fit <- prp(fit, snip = TRUE)$obj
fancyRpartPlot(new.fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class",
control = rpart.control(minsplit = 6, cp = 2))
new.fit <- prp(fit, snip = TRUE)$obj
fancyRpartPlot(new.fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class",
control = rpart.control(minsplit = 6, cp = 0))
new.fit <- prp(fit, snip = TRUE)$obj
fancyRpartPlot(new.fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class",
control = rpart.control(minsplit = 6, cp = 1))
new.fit <- prp(fit, snip = TRUE)$obj
fancyRpartPlot(new.fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class",
control = rpart.control(minsplit = 6, cp = 10))
new.fit <- prp(fit, snip = TRUE)$obj
fancyRpartPlot(new.fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class",
control = rpart.control(minsplit = 10, cp = 0))
new.fit <- prp(fit, snip = TRUE)$obj
fancyRpartPlot(new.fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class",
control = rpart.control(minsplit = 30, cp = 0))
new.fit <- prp(fit, snip = TRUE)$obj
fancyRpartPlot(new.fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class",
control = rpart.control(minsplit = 24, cp = 0))
new.fit <- prp(fit, snip = TRUE)$obj
fancyRpartPlot(new.fit)
train$Name <- as.factor(train$Name)
train$Name[1]
train$Name <- as.factor(train$Name)
train$Name[1]
# Merege train / test
test$Survived <- NA
combi <- rbind(train, test)
View(combi)
# Change back to a char
combi$Name <- as.character(combi$Name)
combi$Name[1]
# Split the char apart
strsplit(combi$Name[1], split = '[,.]')
# Change back to a char
combi$Name <- as.character(combi$Name)
combi$Name[1]
# Split the char apart
strsplit(combi$Name[1], split = '[,.]')[[1]]
# Change back to a char
combi$Name <- as.character(combi$Name)
combi$Name[1]
# Split the char apart
strsplit(combi$Name[1], split = '[,.]')
strsplit(combi$Name[1], split = '[,.]')[[1]]
# Change back to a char
combi$Name <- as.character(combi$Name)
combi$Name[1]
# Split the char apart
strsplit(combi$Name[1], split = '[,.]')
strsplit(combi$Name[1], split = '[,.]')[[1]]
strsplit(combi$Name[1], split = '[,.]')[[1]][2]
# Change back to a char
combi$Name <- as.character(combi$Name)
combi$Name[1]
# Split the char apart
strsplit(combi$Name[1], split = '[,.]')
strsplit(combi$Name[1], split = '[,.]')[[1]]
strsplit(combi$Name[1], split = '[,.]')[[1]][2] # index 2
combi$Title <- sapply(combi$Name, FUN = function(x) {strsplit(x, split = '[,.]')[[1]][2]})
View(combi)
# Change back to a char
combi$Name <- as.character(combi$Name)
combi$Name[1]
# Split the char apart
strsplit(combi$Name[1], split = '[,.]')
strsplit(combi$Name[1], split = '[,.]')[[1]]
strsplit(combi$Name[1], split = '[,.]')[[1]][2] # index 2
combi$Title <- sapply(combi$Name, FUN = function(x) {strsplit(x, split = '[,.]')[[1]][2]}) # Create Title variable (column)
combi$Title <- sub(' ','', combi$Title) # Strip spaces from beginning of titles
View(combi)
# Change back to a char
combi$Name <- as.character(combi$Name)
combi$Name[1]
# Split the char apart
strsplit(combi$Name[1], split = '[,.]')
strsplit(combi$Name[1], split = '[,.]')[[1]]
strsplit(combi$Name[1], split = '[,.]')[[1]][2] # index 2
combi$Title <- sapply(combi$Name, FUN = function(x) {strsplit(x, split = '[,.]')[[1]][2]}) # Create Title variable (column)
combi$Title <- sub(' ','', combi$Title) # Strip spaces from beginning of titles
table(combi$Title)
combi$Title[combi$Title %in%c('Mme','Mlle')] <- 'Mlle
combi$Title[combi$Title %in% c('Mme','Mlle')] <- 'Mlle
combi$Title[combi$Title %in% c('Mme','Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle' # Combine lesser used titles
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- Sir
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle' # Combine lesser used titles
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona',  'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combi$Title <- factor(combi$Title) # Change back to a factor
View(combi)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
# Extract passenger lastnames
combi$Surname <-sapply(combi$Name, FUN = function(x) {strsplit(x, split = '[,.]')[[1]][1]})
# Change FamilySize to a char and append
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep = "")
# Any family of size <2 is small (pesky Johnsons)
combi$FamilyID[combi$FamilySize <= 2] <- 'small'
famIDs <- data.frame(table(combi$FamilyID))
View(famIDs)
famIDs <- famIDs[famIDs$Freq <=2, ]
View(famIDs)
View(famIDs)
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'small'
combi$FamilyID <- factor(combi$FamilyID)
View(famIDs)
View(combi)
train <- combi[1:891,]
test <- combi[892:1309]
View(test)
train <- combi[1:891,]
test <- combi[892:1309]
train <- combi[1:891,]
test <- combi[892:1309,]
View(test)
fir <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data = train,
method = "class")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data = train,
method = "class")
View(fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data = train,
method = "class")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data = train,
method = "class")
fancyRpartPlot(fit)
sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE)
summary(combi$Age)
sample(1:10, replace = TRUE)
summary(combi$Age) # 263 NA's
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Emarked + Title + FamilySize,
data = combi[!is.na(combi$Age),],
method = "anova")
sample(1:10, replace = TRUE)
summary(combi$Age) # 263 NA's
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data = combi[!is.na(combi$Age),],
method = "anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit,
combi[is.na(combi$Age),])
sample(1:10, replace = TRUE)
summary(combi$Age) # 263 NA's
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data = combi[!is.na(combi$Age),],
method = "anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit,
combi[is.na(combi$Age),])
summary(combi$Age)
summary(combi)
summary(combi)
combi$Embarked <- as.factor(combi$Embarked)
summary(combi$Embarked)
summary(combi) # Combi is char and Fare has an NA
combi$Embarked <- as.factor(combi$Embarked) # Convert to a factor
summary(combi$Embarked) # Embarked has a blank
which(combi$Embarked == '') # Indexes of blank fields
combi$Embarked[c(62,830)] = "S" # Fill the blanks with 'S'
combi$Embarked <- factor(combi$Embarked)
summary(combi$Fare)
summary(combi$Fare)
which(is.na(combi$Fare))
summary(combi$Fare)
which(is.na(combi$Fare)) # which index (1044)
combi$Fare[1044] <- median(combi$Fare, na.rm = TRUE)
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'small'
combi$FamilyID2 <- factor(combi$FamilyID2)
View(combi)
View(combi)
library(randomForest)
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data = train,
importance = TRUE,
ntree = 2000)
View(fit)
View(combi)
library(randomForest)
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data = train,
importance = TRUE,
ntree = 2000)
View(combi)
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'small'
combi$FamilyID2 <- factor(combi$FamilyID2)
library(randomForest)
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data = train,
importance = TRUE,
ntree = 2000)
train <- combi[1:891,]
test <- combi[892:1309,]
library(randomForest)
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data = train,
importance = TRUE,
ntree = 2000)
varImpPlot(fit)
Prediction <- predict(fit, test)
Prediction <- predict(fit, test)
fancyRpartPlot(Prediction)
Prediction <- predict(fit, test)
fancyRpartPlot(fit)
Prediction <- predict(fit, test)
Prediction
Prediction <- predict(fit, test)
varImpPlot(Prediction)
install.packages("party")
library(party)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID,
data = train,
controls = cforest_unbiased(ntree = 2000, mtry = 3))
Prediction <- predict(fit, test, OOB = TRUE, type = "response")
library(party)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID,
data = train,
controls = cforest_unbiased(ntree = 2000, mtry = 3))
Prediction <- predict(fit, test, OOB = TRUE, type = "response")
varImpPlot(fit)
library(party)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID,
data = train,
controls = cforest_unbiased(ntree = 2000, mtry = 3))
library(party)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID,
data = train,
controls = cforest_unbiased(ntree = 2000, mtry = 3))
Prediction <- predict(fit, test, OOB = TRUE, type = "response")
Prediction <- predict(fit, test)
library(tidyverse)
library(corrplot)
library(gridExtra)
library(GGally)
library(knitr)
wines <- read.csv("Wine.csv")
wines <- read.csv("Wine.csv")
setwd("~/GitHub/Data-Science-and-Machine-Learning-with-R-from-A-Z-Course/Uni Labs")
wines <- read.csv("Wine.csv")
wines <- read.csv("Wine.csv")
wines <- wines[, -14]
kable(head(wines))
# Histogram for each Attribute
wines %>%
gather(Attributes, value, 1:13) %>%
ggplot(aes(x = value, fill = Attributes)) +
facet_wrap(~ Attributes, scales = "free_x") +
labs(x = "Values", y = "Frequency",
title = "Wines Attributes - Histograms") +
theme_bw()
# Histogram for each Attribute
wines %>%
gather(Attributes, value, 1:13) %>%
ggplot(aes(x = value, fill = attributes)) +
facet_wrap(~ Attributes, scales = "free_x") +
labs(x = "Values", y = "Frequency",
title = "Wines Attributes - Histograms") +
theme_bw()
# Histogram for each Attribute
wines %>%
gather(Attributes, value, 1:13) %>%
ggplot(aes(x = value, fill = Attributes)) +
facet_wrap(~ Attributes, scales = "free_x") +
labs(x = "Values", y = "Frequency",
title = "Wines Attributes - Histograms") +
theme_bw()
# Histogram for each Attribute
wines %>%
gather(attributes, value, 1:13) %>%
ggplot(aes(x = value, fill = attributes)) +
facet_wrap(~ attributes, scales = "free_x") +
labs(x = "Values", y = "Frequency",
title = "Wines Attributes - Histograms") +
theme_bw()
# Histogram for each Attribute
wines %>%
gather(Attributes, value, 1:13) %>%
ggplot(aes(x = value, fill = Attributes)) +
geom_histogram(colour = "black", show.legend = FALSE) +
facet_wrap(~ Attributes, scales = "free_x") +
labs(x = "Values", y = "Frequency",
title = "Wines Attributes - Histograms") +
theme_bw()
wines %>%
gather(Attributes, value, 1:13) %>%
ggplot(aes(x = value, fill = Attributes)) +
geom_density(colour = "black", alpha =0.5, show.legend = FLASE) +
facet_wrap(~ Attributes, scales = "free_x") +
labs(x = "Values", y = "Density",
title = "Wines Attributes - Density plots")+
theme_bw()
wines %>%
gather(Attributes, value, 1:13) %>%
ggplot(aes(x = value, fill = Attributes)) +
geom_density(colour = "black", alpha =0.5, show.legend = FLASE) +
facet_wrap(~ Attributes, scales = "free_x") +
labs(x = "Values", y = "Density",
title = "Wines Attributes - Density plots")+
theme_bw()
wines %>%
gather(Attributes, value, 1:13) %>%
ggplot(aes(x = value, fill = Attributes)) +
geom_density(colour = "black", alpha =0.5, show.legend = FALSE) +
facet_wrap(~ Attributes, scales = "free_x") +
labs(x = "Values", y = "Density",
title = "Wines Attributes - Density plots")+
theme_bw()
wines %>%
gather(Attributes, values, c(1:4, 6:12)) %>%
ggplot(aes(x = reorder(Attributes, values, FUN = median), y = values, fill = Attributes)) +
geom_boxplot(show.legend = FALSE) +
labs(title = "Wines Attributes BOxplots") +
theme_bw() +
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()) +
ylim(0, 35) +
coord_flip()
corrplot(corr(wines), type = "upper", method = ellipse, tl.cex = 0.9)
corrplot(corr(wines), type = "upper", method = "ellipse", tl.cex = 0.9)
corrplot(cor(wines), type = "upper", method = "ellipse", tl.cex = 0.9)
ggplot(wines, aes(x = Phenols, y = Flavanoids)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Wines Attributes",
subtitle = "Relationship between Phenols and Flavanoids") +
theme_bw()
# Normalization
winesNorm <- as.data.frame(scale(wines))
# Original data
p1 <- ggplot(wines, aes(x = Alcohol, y = Malic.acid)) +
geom_point()
labs(title = "Original data") +
theme_bw()
# Normalized data
p2 <- ggplot(winesNorm, aes(x = Alcohol, y = Malic.acid)) +
geom_point()
labs(title = "Original data") +
theme_bw()
# Subplot
grid.arrange(p1, p2, ncol = 2)
# Normalization
winesNorm <- as.data.frame(scale(wines))
# Original data
p1 <- ggplot(wines, aes(x = Alcohol, y = Malic.acid)) +
geom_point()
labs(title = "Original data") +
theme_bw()
# Normalized data
p2 <- ggplot(winesNorm, aes(x = Alcohol, y = Malic.acid)) +
geom_point()
labs(title = "Normalized data") +
theme_bw()
# Subplot
grid.arrange(p1, p2, ncol = 2)
#Execution of k-means with k=2
set.seed(1234)
wines_k2 <- kmeans(winesNorm, centers = 2)
# The kmeans() function returns an object of class "kmeans" with information about the partition:
# cluster - A vector of integers indicating the cluster to which each point is allocated.
# centers - A matrix of cluster centers.
# size - The number of points in each cluster.
# Cluster to which each point is allocated
wines_k2$cluster
# Cluster centers
wines_k2$centers
# Cluster size
wines_k2$size
#Execution of k-means with k=2
set.seed(1234)
wines_k2 <- kmeans(winesNorm, centers = 2)
# The kmeans() function returns an object of class "kmeans" with information about the partition:
# cluster - A vector of integers indicating the cluster to which each point is allocated.
# centers - A matrix of cluster centers.
# size - The number of points in each cluster.
# Cluster to which each point is allocated
wines_k2$cluster
# Cluster centers
wines_k2$centers
# Cluster size
wines_k2$size
# Between-cluster sum of squares
wines_k2$betweenss
# Within-cluster sum of squares
wines_k2$withinss
# Total within-cluster sum of squares
wines_k2$tot.withinss
# Total sum of squares
wines_k2$totss
bss <- numeric()
wss <- numeric()
# Run the algorithm for different values of k
set.seed(1234)
for (i in 1:10) {
# for each k, calculate betweenss and tot.withinss
bss[i] <- kmeans(winesNorm, centers = i)$betweenss
wss[i] <- kmeans(winesNorm, centers = i)$tot.withinss
}
bss <- numeric()
wss <- numeric()
# Run the algorithm for different values of k
set.seed(1234)
for (i in 1:10) {
# for each k, calculate betweenss and tot.withinss
bss[i] <- kmeans(winesNorm, centers = i)$betweenss
wss[i] <- kmeans(winesNorm, centers = i)$tot.withinss
}
# Between-cluster sum of squares vs Choice of k
p3 <- qplot(1:10, bss, geom = c("point", "line"),
xlab = "Number of clusters",
ylab = "Between-cluster sum of squares") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme_bw()
# Total within-cluster sum of squares vs Choice of k
p4 <- qplot(1:10, wss, geom = c("point", "line"),
xlab = "Number of clusters",
ylab = "Total within-cluster sum of squares") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
theme_bw()
# subplot
grid.arrange(p3, p4, ncol = 2)
# Execution of k-means with k=3
set.seed(1234)
wines_k3 <- kmeans(winesNorm, centers = 3)
# Mean values of each cluster
aggregate(wines, by = list(wines_k3$cluster), mean)
# Clustering
ggpairs(cbind(wines, Cluster=as.factor(wines_k3$cluster)),
columns = 1:6, aes(colour = Cluster, alpha = 0.5),
lower = list(continuous="points"),
upper = list(continuous="blank"),
axisLabels = "none", switch = "both")+
theme_bw()
