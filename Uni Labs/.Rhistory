ggplot(data = .,
aes(x = x,
y = y,
col = price,
size = table)) +
geom_point(alpha = .2) +
facet_grid(cut ~ color) +
scale_color_continuous(low = "green",
high = "red")
Salaries <- read_csv("salaries.csv")
Salaries <- read.csv("salaries.csv")
Salaries <- read_tsv("salaries.txt")
Salaries <- read.tsv("salaries.txt")
Salaries <- read_tsv("salaries.txt")
Salaries <- read.table("salaries.txt")
Salaries <- read.table("salaries.txt")
Salaries <- read.table("salaries.txt")
Salaries <- read_tsv("salaries.txt")
Salaries <- read.table("salaries.txt")
library(readxl)
Salaries <- read_excel("salaries.xlsx", sheet=1)
library(haven)
Salaries <- read_dta("salaries.dta")
install.packages("foreign")
import rpy2.robjects as robjects
library(haven)
x <- read.csv("salaries.csv")
write_dta(x, "salaries.dta")
library(haven)
x <- read.csv("salaries.csv")
# Replace illegal characters in variable names
names(x) <- gsub("\\.", "_", names(x))
# Write to Stata format
write_dta(x, "salaries.dta")
Salaries <- read_dta("salaries.dta")
Salaries <- read_dta("salaries.dta")
write_sav(Salaries, "salaries.sav")
Salaries <- read_dta("salaries.dta")
Salaries <- read_sav("salaries.sav")
library(dplyr)
newdata <- select(starwars, name, height, gender)
newdata <- select(starwars, name mass:species)
newdata <- select(starwars, name, mass:species)
newdata <- select(starwars, -birth_year, -gender)
newdata <- filter(starwars, gender == "female")
View(newdata)
View(newdata)
View(newdata)
library(dplyr)
newdata <- filter(starwars, gender == "female")
View(newdata)
newdata <- filter(starwars,
gender == "female")
newdata <- filter(starwars,
gender == "female")
newdata <- filter(starwars,
gender == "female")
View(newdata)
newdata <- filter(starwars, tolower(gender) == "female")
newdata <- filter(starwars, tolower(gender) == "female")
newdata <- filter(starwars, tolower(gender) == "female")
newdata <- filter(starwars, tolower(gender) == "female")
newdata <- filter(starwars, tolower(gender) == "female")
newdata <- filter(starwars, tolower(gender) == "female")
newdata <- filter(starwars, tolower(gender) == "female")
newdata <- select(starwars, name, height, gender)
View(newdata)
newdata <- filter(starwars,
gender == "feminine")
View(newdata)
newdata <- filter(starwars,
gender == "feminine" &
homeworld == "Alderaan")
View(newdata)
newdata <- filter(starwars,
gender == "feminine" &
homeworld == "Alderaan")
newdata <- filter(starwars,
homeworld == "Alderaan" |
homeworld == "Coruscant" |
homeworld == "Endor")
View(newdata)
newdata <- filter(starwars,
homeworld %in% c("Alderaan", "Coruscant", "Endor"))
newdata <- mutate(starwars,
height = height * 0.394,
mass = mass * 2.205)
newdata <- mutate(starwars,
heightcat = ifelse(height > 180,
"tall",
"short"))
View(newdata)
newdata <- mutate(starwars,
eye_color = ifelse(eye_color %in% c("black", "blue", "brown"),
eye_color, "other"))
View(newdata)
newdata <- mutate(starwars, height = ifelse(height < 75 | height > 200,
NA,
height))
View(newdata)
newdata <- summarise(starwars,
mean_ht = mean(height, na.rm=TRUE),
mean_mass = mean(mass, na.rm=TRUE))
newdata
newdata <- group_by(starwars, gender)
starwars <- summarise(newdata, mean_ht = mean, na.rm=TRUE)
newdata <- group_by(starwars, gender)
starwars <- summarise(newdata,
mean_ht = mean(height, na.rm=TRUE))
newdata <- group_by(starwars, gender)
starwars <- summarise(newdata,
mean_ht = mean(height, na.rm=TRUE),
mean_wt = mean(mass, na.rm=TRUE))
newdata <- group_by(starwars, gender)
starwars <- summarise(newdata,
#mean_ht = mean(height, na.rm=TRUE),
mean_wt = mean(mass, na.rm=TRUE))
View(starwars)
View(newdata)
View(newdata)
View(newdata)
newdata <- group_by(starwars, gender)
starwars <- summarise(newdata,
mean_ht = mean(height, na.rm=TRUE),
mean_wt = mean(mass, na.rm=TRUE))
View(starwars)
View(newdata)
newdata <- filter(starwars,
gender == "feminine")
newdata <- group_by(species)
newdata <- filter(starwars,
gender == "feminine")
newdata <- group_by(species)
View(newdata)
newdata <- filter(starwars,
gender == "feminine")
newdata <- group_by(species)
View(newdata)
newdata <- filter(starwars,
gender == "feminine")
newdata <- group_by(species)
newdata <- filter(starwars,
gender == "feminine")
newdata <- group_by(species)
newdata <- filter(starwars,
gender == "feminine")
newdata <- group_by(species)
newdata <- filter(starwars,
gender == "feminine")
newdata <- group_by(species)
newdata <- filter(starwars,
gender == "feminine")
newdata <- group_by(species)
newdata <- filter(starwars,
gender == "feminine")
newdata <- group_by(newdata, species)
newdata <- summarise(newdata,
mean_ht = mean(height, na.rm=TRUE))
View(newdata)
newdata <- starwars %>%
filter(gender == "feminine") %>%
group_by(species) %>%
summarise(mean_ht = mean(height, na.rm = TRUE))
long_data <- gather(wide_data,
key = "variable",
value = "value",
sex:income)
library(tidyr)
#Just an example (not real data)
long_data <- gather(wide_data,
key = "variable",
value = "value",
sex:income)
data(msleep, package="ggplot2")
data(msleep, package="ggplot2")
# what is the proportion of missing data for each variable?
pctmiss <- colSums(is.na(msleep))/nrow(msleep)
data(msleep, package="ggplot2")
# what is the proportion of missing data for each variable?
pctmiss <- colSums(is.na(msleep))/nrow(msleep)
round(pctmiss, 2)
install.packages("readr")
library(readr)
df <- aero("Airplane_Crashes_and_Fatalities_Since_1908.csv")
install.packages("readr")
library(readr)
df <- aero("Airplane_Crashes_and_Fatalities_Since_1908.csv")
df <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
df <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
setwd("~/GitHub/Aviation-crash-analysis-for-the-past-100-years")
df <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
aero <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
pctmiss <- colSums(is.na(df))/nrow(msleep)
misscol <- colSums(is.na(aero))
misscol <- colSums(is.na(aero)) / nrow(aero)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
sapply(aero, class)
setwd("~/GitHub/Data-Science-and-Machine-Learning-with-R-from-A-Z-Course")
newdata <- select(msleep, genus, vore, conservation)
data(msleep, package="ggplot2")
# what is the proportion of missing data for each variable?
pctmiss <- colSums(is.na(msleep))/nrow(msleep)
round(pctmiss, 2)
newdata <- select(msleep, genus, vore, conservation)
library(dplyr)
newdata <- select(msleep, genus, vore, conservation)
newdata <- na.omit(newdata)
View(newdata)
library(VIM)
newdata <- kNN(msleep, k=5)
View(msleep)
View(msleep)
View(newdata)
View(msleep)
View(newdata)
edidiv <- read.csv("~ edidiv.csv")
setwd("~/GitHub/Data-Science-and-Machine-Learning-with-R-from-A-Z-Course/Uni Labs")
edidiv <- read.csv("~ edidiv.csv")
edidiv <- read.csv("edidiv.csv")
edidiv <- read.csv("edidiv.csv")
View(edidiv)
head(edidiv)
tail(edidiv)
srt(edidiv)
head(edidiv)
tail(edidiv)
str(edidiv)
head(edidiv$taxonGroup) # Displays the first few rows of this column only
class(edidiv$taxonGroup) # Tells you what type of variable we're dealing with : it's a character now but we want it to be a factor.
edidiv$taxonGroup <- as.factor(edidiv$taxonGroup) # Changes the variable from it's current type 'character' into a factor.
View(edidiv)
head(edidiv$taxonGroup) # Displays the first few rows of this column only
class(edidiv$taxonGroup) # Tells you what type of variable we're dealing with : it's a character now but we want it to be a factor.
edidiv$taxonGroup <- as.factor(edidiv$taxonGroup) # Changes the variable from it's current type 'character' into a factor and assigning it.
class(edidiv$taxonGroup)
Beetle <- filter(edidiv, taxonGroup == "Beetle")
View(Beetle)
Beetle <- filter(edidiv, taxonGroup == "Beetle") # Creates a dataframe with only information for beetles.
Bird <- filter(edidiv, taxonGroup == "Bird") # # Creates a dataframe with only information for birds
View(Bird)
View(Bird)
View(edidiv)
View(edidiv)
unique(edidiv$taxonGroup)
Beetle <- filter(edidiv, taxonGroup == "Beetle") # Creates a dataframe with only information for beetles.
Bird <- filter(edidiv, taxonGroup == "Bird") # # Creates a dataframe with only information for birds , and so on....
Butterfly <- filter(edidiv, taxonGroup == "Butterfly")
View(Butterfly)
Beetle <- filter(edidiv, taxonGroup == "Beetle") # Creates a dataframe with only information for beetles.
Bird <- filter(edidiv, taxonGroup == "Bird") # # Creates a dataframe with only information for birds , and so on....
Butterfly <- filter(edidiv, taxonGroup == "Butterfly")
Dragonfly <- filter(edidiv, taxonGroup == "Dragonfly")
View(Dragonfly)
Beetle <- filter(edidiv, taxonGroup == "Beetle") # Creates a dataframe with only information for beetles.
Bird <- filter(edidiv, taxonGroup == "Bird") # # Creates a dataframe with only information for birds , and so on....
Butterfly <- filter(edidiv, taxonGroup == "Butterfly")
Dragonfly <- filter(edidiv, taxonGroup == "Dragonfly")
Hymenopteran <- filter(edidiv, taxonGroup == "Hymenopteran")
View(Hymenopteran)
Beetle <- filter(edidiv, taxonGroup == "Beetle") # Creates a dataframe with only information for beetles.
Bird <- filter(edidiv, taxonGroup == "Bird") # # Creates a dataframe with only information for birds , and so on....
Butterfly <- filter(edidiv, taxonGroup == "Butterfly")
Dragonfly <- filter(edidiv, taxonGroup == "Dragonfly")
Hymenopteran <- filter(edidiv, taxonGroup == "Hymenopteran")
Lichen <- filter(edidiv, taxonGroup == "Lichen")
Beetle <- filter(edidiv, taxonGroup == "Beetle") # Creates a dataframe with only information for beetles.
Bird <- filter(edidiv, taxonGroup == "Bird") # # Creates a dataframe with only information for birds , and so on....
Butterfly <- filter(edidiv, taxonGroup == "Butterfly")
Dragonfly <- filter(edidiv, taxonGroup == "Dragonfly")
Hymenopteran <- filter(edidiv, taxonGroup == "Hymenopteran")
Lichen <- filter(edidiv, taxonGroup == "Lichen")
Liverwort <- filter(edidiv, taxonGroup == "Liverwort")
View(Liverwort)
Beetle <- filter(edidiv, taxonGroup == "Beetle") # Creates a dataframe with only information for beetles.
Bird <- filter(edidiv, taxonGroup == "Bird") # # Creates a dataframe with only information for birds , and so on....
Butterfly <- filter(edidiv, taxonGroup == "Butterfly")
Dragonfly <- filter(edidiv, taxonGroup == "Dragonfly")
Hymenopteran <- filter(edidiv, taxonGroup == "Hymenopteran")
Lichen <- filter(edidiv, taxonGroup == "Lichen")
Liverwort <- filter(edidiv, taxonGroup == "Liverwort")
Mollusc <- filter(edidiv, taxonGroup == "Mollusc")
Mammal <- filter(edidiv, taxonGroup == "Mammal")
Flowering.Plants Fungus <- filter(edidiv, taxonGroup == "Flowering.Plants Fungus")
Beetle <- filter(edidiv, taxonGroup == "Beetle") # Creates a dataframe with only information for beetles.
Bird <- filter(edidiv, taxonGroup == "Bird") # # Creates a dataframe with only information for birds , and so on....
Butterfly <- filter(edidiv, taxonGroup == "Butterfly")
Dragonfly <- filter(edidiv, taxonGroup == "Dragonfly")
Hymenopteran <- filter(edidiv, taxonGroup == "Hymenopteran")
Lichen <- filter(edidiv, taxonGroup == "Lichen")
Liverwort <- filter(edidiv, taxonGroup == "Liverwort")
Mollusc <- filter(edidiv, taxonGroup == "Mollusc")
Mammal <- filter(edidiv, taxonGroup == "Mammal")
Flowering.Plants <- filter(edidiv, taxonGroup == "Flowering.Plants")
View(Flowering.Plants)
Beetle <- filter(edidiv, taxonGroup == "Beetle") # Creates a dataframe with only information for beetles.
Bird <- filter(edidiv, taxonGroup == "Bird") # # Creates a dataframe with only information for birds , and so on....
Butterfly <- filter(edidiv, taxonGroup == "Butterfly")
Dragonfly <- filter(edidiv, taxonGroup == "Dragonfly")
Hymenopteran <- filter(edidiv, taxonGroup == "Hymenopteran")
Lichen <- filter(edidiv, taxonGroup == "Lichen")
Liverwort <- filter(edidiv, taxonGroup == "Liverwort")
Mollusc <- filter(edidiv, taxonGroup == "Mollusc")
Mammal <- filter(edidiv, taxonGroup == "Mammal")
Flowering.Plants <- filter(edidiv, taxonGroup == "Flowering.Plants")
Fungus <- filter(edidiv, taxonGroup == "Fungus")
View(Fungus)
a <- length(unique(Beetle$taxonName))
a <- length(unique(Beetle$taxonName))
b <- length(unique(Bird$taxonName))
c <- length(unique(Butterfly$taxonName))
d <- length(unique(Dragonfly$taxonName))
e <- length(unique(Hymenopteran$taxonName))
f <- length(unique(Lichen$taxonName))
g <- length(unique(Liverwort$taxonName))
a <- length(unique(Beetle$taxonName))
b <- length(unique(Bird$taxonName))
c <- length(unique(Butterfly$taxonName))
d <- length(unique(Dragonfly$taxonName))
e <- length(unique(Hymenopteran$taxonName))
f <- length(unique(Lichen$taxonName))
g <- length(unique(Liverwort$taxonName))
g <- length(unique(Mollusc$taxonName))
g <- length(unique(Mammal$taxonName))
g <- length(unique(Flowering.Plants$taxonName))
g <- length(unique(Fungus$taxonName))
a
a <- length(unique(Beetle$taxonName)) # unique() identifies species and length() counts them
b <- length(unique(Bird$taxonName))
c <- length(unique(Butterfly$taxonName))
d <- length(unique(Dragonfly$taxonName))
e <- length(unique(Hymenopteran$taxonName))
f <- length(unique(Lichen$taxonName))
g <- length(unique(Liverwort$taxonName))
h <- length(unique(Mollusc$taxonName))
i <- length(unique(Mammal$taxonName))
j <- length(unique(Flowering.Plants$taxonName))
k <- length(unique(Fungus$taxonName))
biodiv <- c(a, b, c, d, e, f, g, h, i, j, k)
biodiv <- c(a, b, c, d, e, f, g, h, i, j, k)
names(biodiv)
biodiv <- c(a, b, c, d, e, f, g, h, i, j, k)
names(biodiv) <- c("Beetle",
"Bird",
"Butterfly",
"Dragonfly",
"Hymenopteran",
"Lichen",
"Liverwort",
"Mollusc",
"Mammal",
"Flowering.Plants",
"Fungus")
barplot(biodiv)
help(barplot) # For help with barplot() function
help(par) # For help with plotting in general
barplot(biodiv)
taxa <- c("Beetle",
"Bird",
"Butterfly",
"Dragonfly",
"Hymenopteran",
"Lichen",
"Liverwort",
"Mollusc",
"Mammal",
"Flowering.Plants",
"Fungus")
# Creating an object called taxa that contains all of the taxa names
taxa <- c("Beetle",
"Bird",
"Butterfly",
"Dragonfly",
"Hymenopteran",
"Lichen",
"Liverwort",
"Mollusc",
"Mammal",
"Flowering.Plants",
"Fungus")
# Turning this object into a factor (categorical variable)
taxa_f <- factor(taxa)
# Combining all of the values for the number of species in an object called richness
richness <- c(a, b, c, d, e, f, g, h, i, j, k)
# Creating a dataframe from the two vectors
biodata <- data.frame(taxa_f, richness)
# Saving the file
write.csv(biodata, file = "biodata.csv")
barplot(biodata$richness, names.arg = c("Beetle",
"Bird",
"Butterfly",
"Dragonfly",
"Hymenopteran",
"Lichen",
"Liverwort",
"Mollusc",
"Mammal",
"Flowering.Plants",
"Fungus"),
xlab = "Taxa", ylab = "Number of species", ylim = c(0, 600))
dev.off()
png("barplot2.png", width = 1600, height = 600)
barplot(biodata$richness, names.arg = c("Beetle",
"Bird",
"Butterfly",
"Dragonfly",
"Hymenopteran",
"Lichen",
"Liverwort",
"Mollusc",
"Mammal",
"Flowering.Plants",
"Fungus"),
xlab = "Taxa", ylab = "Number of species", ylim = c(0, 600))
dev.off()
#Calculate the wingspan for every bird type
edidiv <- read.csv("edidiv.csv")
View(edidiv)
#Calculate the wingspan for every bird type
edidiv <- read.csv("edidiv.csv")
unique(edidiv$taxonGroup$Bird)
#Calculate the wingspan for every bird type
edidiv <- read.csv("edidiv.csv")
unique(edidiv$taxonName)
#Calculate the wingspan for every bird type
sparrow <- mean(22, 24, 21)
#Calculate the wingspan for every bird type
sparrow <- mean(22, 24, 21)
kingfisher <- mean(26, 23, 25)
eagle <- mean(195, 201, 185)
hummingbird <- mean(8, 9, 9)
# Chain them together in a vector
wingspan <- c(sparrow, kingfisher, eagle, hummingbird)
#Calculate the wingspan for every bird type
sparrow <- mean(22, 24, 21)
kingfisher <- mean(26, 23, 25)
eagle <- mean(195, 201, 185)
hummingbird <- mean(8, 9, 9)
# Chain them together in a vector
wingspan <- c(sparrow, kingfisher, eagle, hummingbird)
# Create a bird species vector (matching the order of the previous vector)
bird_sp <- c("sparrow", "kingfisher", "eagle", "hummingbird")
#Calculate the wingspan for every bird type
sparrow <- mean(22, 24, 21)
kingfisher <- mean(26, 23, 25)
eagle <- mean(195, 201, 185)
hummingbird <- mean(8, 9, 9)
# Chain them together in a vector
wingspan <- c(sparrow, kingfisher, eagle, hummingbird)
# Create a bird species vector (matching the order of the previous vector)
bird_sp <- c("sparrow", "kingfisher", "eagle", "hummingbird")
# Change bird_sp into a factor
class(bird_sp)
#Calculate the wingspan for every bird type
sparrow <- mean(22, 24, 21)
kingfisher <- mean(26, 23, 25)
eagle <- mean(195, 201, 185)
hummingbird <- mean(8, 9, 9)
# Chain them together in a vector
wingspan <- c(sparrow, kingfisher, eagle, hummingbird)
# Create a bird species vector (matching the order of the previous vector)
bird_sp <- c("sparrow", "kingfisher", "eagle", "hummingbird")
# Change bird_sp into a factor
class(bird_sp)
bird_sp <- as.factor(bird_sp)
#Calculate the wingspan for every bird type
sparrow <- mean(22, 24, 21)
kingfisher <- mean(26, 23, 25)
eagle <- mean(195, 201, 185)
hummingbird <- mean(8, 9, 9)
# Chain them together in a vector
wingspan <- c(sparrow, kingfisher, eagle, hummingbird)
# Create a bird species vector (matching the order of the previous vector)
bird_sp <- c("sparrow", "kingfisher", "eagle", "hummingbird")
# Change bird_sp into a factor
class(bird_sp)
bird_sp <- as.factor(bird_sp)
#Calculate the wingspan for every bird type
sparrow <- mean(22, 24, 21)
kingfisher <- mean(26, 23, 25)
eagle <- mean(195, 201, 185)
hummingbird <- mean(8, 9, 9)
# Chain them together in a vector
wingspan <- c(sparrow, kingfisher, eagle, hummingbird)
# Create a bird species vector (matching the order of the previous vector)
bird_sp <- c("sparrow", "kingfisher", "eagle", "hummingbird")
# Change bird_sp into a factor
class(bird_sp)
bird_sp <- as.factor(bird_sp)
class(bird_sp)
#Calculate the wingspan for every bird type
sparrow <- mean(22, 24, 21)
kingfisher <- mean(26, 23, 25)
eagle <- mean(195, 201, 185)
hummingbird <- mean(8, 9, 9)
# Chain them together in a vector
wingspan <- c(sparrow, kingfisher, eagle, hummingbird)
# Create a bird species vector (matching the order of the previous vector)
bird_sp <- c("sparrow", "kingfisher", "eagle", "hummingbird")
# Change bird_sp into a factor
class(bird_sp)
bird_sp <- as.factor(bird_sp)
class(bird_sp)
# Combine the two vectos into a dataframe
wings <- data.frame(bird_sp, wingspan)
png("wingspan_plot.png", width = 800, height = 600)
barplot(wings$wingspan, names.arg = wings$bird_sp, # Much simpler to call the bird_sp column than typing them all out
xlab = "Bird Species",
ylab = "Average Wingspan (cm)", # setting the axis names
ylim = c(0,200), # setting the limits to fit the eagle
col = "gold") # colour = gold
dev.off()
